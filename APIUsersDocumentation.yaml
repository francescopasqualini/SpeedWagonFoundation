swagger: '2.0'
info:
  version: '1.0'
  title: "progettois2 "
  description: Our API allow users to fetch many informations about their gym and their progresses
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
# You should put here the URL to your Heroku instance    
host: speedwagonfoundation-app.herokuapp.com
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    # x-summary: Users collection
    get:
      summary: List all users in the database
      produces:
      - application/json
      parameters:
      - name: limit
        in: query
        required: false
        description: the number of user that have to be displayed, if not present the default is 10  
        type : integer
        format: int64
        minimum: 1
      - name: offset
        in: query
        required: false
        description: the index from which the users have to be displayed, if not present the default is 0  
        type : integer
        format: int64
        minimum: 1
      responses:
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/userRequestGet'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/error500'
    
          
    post:
      description: >-
        You may create a user using this action. It takes a JSON
        object containing the properties of a user.
      summary: Create a new user
      consumes:
      - application/json
      produces:
      - application/json       
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userRequestPost'
      responses:
        200:
          description: Successful Response. The created user is returned
          schema:
            $ref: '#/definitions/user'
        400:
          description: The json in the request doesn't  contain all the required fields or some unrequired fields are present
          schema:
            $ref: '#/definitions/error400'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/error500'
    
  /users/{userId}:
    get:
      summary: Returns a user by ID.
      produces:
      - application/json  
      parameters:
      - name: userId
        in: path
        required: true
        description: The id of the required user
        type : integer
        format: int64
        minimum: 1
      responses: 
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/user'
        404:
          description: The required id was not found
          schema:
            $ref: '#/definitions/error404'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/error500'
    delete:
      summary: Delete a user by ID.
      produces:
      - application/json  
      parameters:
      - name: userId
        in: path
        required: true
        description: The id of the required user
        type : integer
        format: int64
        minimum: 1
      responses:
        200:
          description: Successful Response, the deleted user is returned
          schema:
            $ref: '#/definitions/user'
        404:
          description: The required id was not found
          schema:
            $ref: '#/definitions/error404'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/error500'
    put:
      summary: Modify a user by ID.
      description: >-
        You may modify a user using this action. It takes a JSON
        object containing the properties of a user that have to be modified.
        Only provided properties will be changed, non provided properties will be left unchanged
      consumes:
      - application/json
      produces:
      - application/json  
      parameters:
      - name: userId
        in: path
        required: true
        description: The id of the required user
        type : integer
        format: int64
        minimum: 1
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/userRequestPut'
           
      responses:
        200:
          description: Successful Response, the modified user is returned
          schema:
            $ref: '#/definitions/user'
        400:
          description: The json in the request contains some unrequired fields
          schema:
            $ref: '#/definitions/error400'
        404:
          description: The required id was not found
          schema:
            $ref: '#/definitions/error404'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/error500'
            
definitions:
  # This is just a simple model for that defines the Primary Key
  # We could reuse this on the rest of our models.
  PK:
    type: object
    properties:
      id:
        type: number
        description: The identifier.
  user:
    title: user
    type: object
    properties:
      id:
         type: integer
         readOnly: true
         description: the id of the user. Read only
      password:
        type: string
        description: the password of the user
      name:
        type: string
        description: the name of the user
      surname:
        type: string
        description: the surname of the user
      email:
        type: string
        description: the email of the user
      username:
        type: string
        description: the username of the user
      isPt:
        type: boolean
        description: indicates if the user is a personal trainer or not
    example:
        id: 46
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
  userRequestGet:
    title: user
    type: object
    properties:
      results:
         type: array
         items:
          $ref: '#/definitions/user'
      metadata:
        type: object
        properties:
         total:
          type: integer
          description: the numbers of users collected in the database
    example:
      results:
      - id: 46
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
      - id: 47
        password: calTech
        name: Roberto
        surname: Battiti
        email: es@example.com
        username: LionDeveloper
        isPt: true
      metadata:
        total: 2
  userRequestPost:
    title: user
    type: object
    required: 
      - name
      - password
      - surname
      - username
      - email
      - isPt
    properties:
      password:
        type: string
        description: the password of the user
        
      name:
        type: string
        description: the name of the user
        
      surname:
        type: string
        description: the surname of the user
        
      email:
        
        type: string
        description: the email of the user
        
      username:
        type: string
        description: the username of the user
        
      isPt:
        type: boolean
        description: indicates if the user is a personal trainer or not
        
    example:
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
        
  userRequestPut:
    title: user
    type: object
    properties:
      password:
        type: string
        description: the password of the user
        
      name:
        type: string
        description: the name of the user
        
      surname:
        type: string
        description: the surname of the user
        
      email:
        
        type: string
        description: the email of the user
        
      username:
        type: string
        description: the username of the user
        
      isPt:
        type: boolean
        description: indicates if the user is a personal trainer or not
        
    example:
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
        
  
  error500:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      error: server error
  error400:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      error: request bad formed
  error404:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      error: id not found
      
