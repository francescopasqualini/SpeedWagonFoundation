swagger: '2.0'
info:
  version: '1.0'
  title: "ProgettoIS2 API"
  description:  Our API allow users to fetch many informations about their gym and their progresses.
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE   
host: speedwagonfoundation-app.herokuapp.com
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /info:
    x-summary: Gym Information Collection
    
    get:
      summary: List All Info in the database
      produces:
      - application/json      
      responses:
        200:
          description: Successful Response
          schema:
            type: array
            items:
              $ref: '#/definitions/Info'
            example:
              - id: "orario"
                apertura_feriale: "7.00"
                chiusura_feriale: "22.30"
                apertura_festiva: "10.00"
                chiusura_festiva: "20.00"
              - id: "corsi"
                difesa_personale: "lun, mer, ven dalle 16.30 alle 18.00"
                cardio_fitness: "mar, gio dalle 16.30 alle 17.30"
                box: "lun, mer, ven dalle 18.30 alle 20.30"
                pilates: "mar, gio dalle 18.30 alle 20.00"
                yoga: "tutti i giorni dalle 21 alle 22"

    post:
      description: >-
        You may create new information using this action. It takes a JSON
        object containing the information you want to add.
      summary: Create a New Info
      consumes:
      - application/json
      produces:
      - application/json       
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Info'
      responses:
        201:
          description: Info Created
          schema:
              type: object
              properties:
                OK: 
                  type: string
                  description: Info creata con successo!
              example: 
                OK : "Info creata con successo!"
        404:
          description: You have not specify the field id or you have specify an id already in use
          schema: 
            $ref: '#/definitions/error404'
      
  /info/{id}:
  
    x-summary: One specific information
    
    get:
      summary: Retrive the specified information
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the information you want to retrive
        type : string
      produces:
      - application/json
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            items:
              $ref: '#/definitions/Info'
            example:
              - id: "orario"
                apertura_feriale: "7.00"
                chiusura_feriale: "22.30"
                apertura_festiva: "10.00"
                chiusura_festiva: "20.00"
    
    put:
      description: >-
        You may modify an existing information using this action. It takes a JSON
        object containing what you want to change or add.
      summary: Modify an info
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the information you want to retrive
        type : string
      consumes:
      - application/jason
      produces:
      - application/json
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              OK:
                type: string
                description: What you have done
            example: 
              OK : "Info modificata con successo!"
        404:
          description: You have specify an id already in use
          schema: 
            $ref: '#/definitions/error404'
            
    delete:
      description: >-
        You may delete an existing information using this action.
      summary: Delete an info
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the information you want to retrive
        type : string
      produces:
      - application/json
      responses:
        200:
          description: Successful Response
          schema:
            title: success
            type: object
            properties:
              OK:
                type: string
                description: What you have done
            example: 
              OK : "Info eliminata con successo!"
        404:
          description: You have specify an id not in use
          schema: 
            $ref: '#/definitions/error404'
            
  /info/{id}/{key}:
  
    x-summary: One specific field of an information
    get:
      summary: Retrive the specified field of the specified information
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the information you want to retrive
        type : string
      - name: key
        in: path
        required: true
        description: The field of the specified information you want to retrive
        type : string
      produces:
      - application/json
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            properties:
              key: 
                type: string
                description: Target Information 
            example:
              - apertura_festiva: "10.00"
                
    delete:
      description: >-
        You may delete a field of an existing information using this action.
      summary: Delete an info
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the information you want to retrive
        type : string
      - name: key
        in: path
        required: true
        description: The field of the specified information you want to retrive
        type : string
      produces:
      - application/json
      responses:
        200:
          description: Successful Response
          schema:
            title: success
            type: object
            properties:
              OK:
                type: string
                description: What you have done
            example: 
              OK : "Info eliminata con successo!"
        404:
          description: You have specify an id not in use or a field that does not exist
          schema: 
            $ref: '#/definitions/error404'
        500:
          description: You want to delete the field id
          schema:
            type: object
            properties:
              ERRORE: 
                type: string
                description: type of error
            example:
              - ERRORE: "Impossibile eliminare il campo type!"
  /storico:
    post:
      description: >-
        You can add a user log using this method
      summary: Create a new log
      consumes:
      - application/json
      produces:
      - application/json       
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/postStorico'
      responses:
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/error200'
        400:
          description: The request has at least one invalid parameter
          schema:
            $ref: '#/definitions/error422'

    delete:
      summary: Delete history by timestamp.
      parameters:
      - name: body
        in: body
        schema:
          $ref: '#/definitions/data_to_del'
            
        description: >
          You can use this method to delete an history log about a specific user.
      responses:
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/error200'
        404:
          description: The required id was not found
          schema:
            $ref: '#/definitions/error404'

    put:
      summary: Modify an history by id, timestamp and exercises.
      description: >-
        If you wrong a log you may use this method to update it.
      consumes:
      - application/json
      produces:
      - application/json  
      parameters:
      - name: body
        in: body
        schema:
          $ref: '#/definitions/postStorico'
      responses:
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/error200'
        422:
          description: The json in the request contains some unrequired fields
          schema:
            $ref: '#/definitions/error422'
        404:
          description: The required id was not found
          schema:
            $ref: '#/definitions/error404'

  /storico/{id}/{timestamp_start}/{timestamp_stop}:
    get:
      summary: Returns a user history by ID.
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the required user
        type: integer
        format: int64
        minimum: 1
      - name: timestamp_start
        in: path
        required: true
        description: The timestamp of the initial temporal gap
        type: integer
        format: int64
        minimum: 1
      - name: timestamp_stop
        in: path
        required: true
        description: The timestamp of the final temporal gap
        type: integer
        format: int64
        minimum: 1
      responses: 
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/storico'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/error404'
        422:
          description: Malformed Input
          schema:
            $ref: '#/definitions/error422'
  /users:
      # x-summary: Users collection
      get:
        summary: List all users in the database
        produces:
        - application/json
        parameters:
        - name: limit
          in: query
          required: false
          description: the number of user that have to be displayed, if not present the default is 10  
          type : integer
          format: int64
          minimum: 1
        - name: offset
          in: query
          required: false
          description: the index from which the users have to be displayed, if not present the default is 0  
          type : integer
          format: int64
          minimum: 1
        responses:
          200:
            description: Successful Response
            schema:
              $ref: '#/definitions/userRequestGet'
          500:
            description: Server error
            schema:
              $ref: '#/definitions/error500'
      
            
      post:
        description: >-
          You may create a user using this action. It takes a JSON
          object containing the properties of a user.
        summary: Create a new user
        consumes:
        - application/json
        produces:
        - application/json       
        parameters:
          - name: body
            in: body
            required: true
            schema:
              $ref: '#/definitions/userRequestPost'
        responses:
          200:
            description: Successful Response. The created user is returned
            schema:
              $ref: '#/definitions/user'
          400:
            description: The json in the request doesn't  contain all the required fields or some unrequired fields are present
            schema:
              $ref: '#/definitions/error400'
          500:
            description: Server error
            schema:
              $ref: '#/definitions/error500'
      
  /users/{userId}:
      get:
        summary: Returns a user by ID.
        produces:
        - application/json  
        parameters:
        - name: userId
          in: path
          required: true
          description: The id of the required user
          type : integer
          format: int64
          minimum: 1
        responses: 
          200:
            description: Successful Response
            schema:
              $ref: '#/definitions/user'
          404:
            description: The required id was not found
            schema:
              $ref: '#/definitions/error404'
          500:
            description: Server error
            schema:
              $ref: '#/definitions/error500'
      delete:
        summary: Delete a user by ID.
        produces:
        - application/json  
        parameters:
        - name: userId
          in: path
          required: true
          description: The id of the required user
          type : integer
          format: int64
          minimum: 1
        responses:
          200:
            description: Successful Response, the deleted user is returned
            schema:
              $ref: '#/definitions/user'
          404:
            description: The required id was not found
            schema:
              $ref: '#/definitions/error404'
          500:
            description: Server error
            schema:
              $ref: '#/definitions/error500'
      put:
        summary: Modify a user by ID.
        description: >-
          You may modify a user using this action. It takes a JSON
          object containing the properties of a user that have to be modified.
          Only provided properties will be changed, non provided properties will be left unchanged
        consumes:
        - application/json
        produces:
        - application/json  
        parameters:
        - name: userId
          in: path
          required: true
          description: The id of the required user
          type : integer
          format: int64
          minimum: 1
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userRequestPut'
             
        responses:
          200:
            description: Successful Response, the modified user is returned
            schema:
              $ref: '#/definitions/user'
          400:
            description: The json in the request contains some unrequired fields
            schema:
              $ref: '#/definitions/error400'
          404:
            description: The required id was not found
            schema:
              $ref: '#/definitions/error404'
          500:
            description: Server error
            schema:
              $ref: '#/definitions/error500'
  /schede:
      post:
        description: >-
          You may create a training plan using this action. It takes a JSON
          object containing the properties of a training plan.
        summary: Create a new training plan
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
          - name: body
            in: body
            required: true
            schema:
              $ref: '#/definitions/scheda'
        responses:
          200:
            description: Successful Response
  
  
  /schede/{schedaId}:
      get:
        summary: Returns a training plan by ID.
        parameters:
        - name: schedaId
          in: path
          required: true
          description: The id of the training plan
          type : integer
          format: int64
          minimum: 1
        responses:
          200:
            description: Successful Response
            schema:
              $ref: '#/definitions/scheda'
          404:
            description: The required id was not found
            schema:
              $ref: '#/definitions/error404'
      delete:
        summary: Delete a training plan by ID.
        parameters:
        - name: schedaId
          in: path
          required: true
          description: The id of the required user
          type : integer
          format: int64
          minimum: 1
        responses:
          200:
            description: Successful Response
          404:
            description: The required id was not found
            schema:
              $ref: '#/definitions/error404'
      put:
        summary: Modify a training plan by ID.
        description: >-
          You may modify a training plan using this action. It takes a JSON
          object containing the properties of a user that have to be modified.
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - name: schedaId
          in: path
          required: true
          description: The id of the required training plan
          type : integer
          format: int64
          minimum: 1
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scheda'
        responses:
          200:
            description: Successful Response
            schema:
              $ref: '#/definitions/scheda'
          404:
            description: The required id was not found
            schema:
              $ref: '#/definitions/error404'
              
              
              
              
              

definitions:
  PK:
    type: object
    properties:
      id:
        type: number
        description: The identifier.
        


              



  scheda:
    title: scheda
    type: object
    properties:
      N_esercizi:
        type: integer
        description: the number of excercise
      esercizi:
        type: object
        description: the excercises in the training plan
    example:
        N_esercizi: 2
        esercizi: {
          esercizio1: {
              "id" : 1,
              "nome" : "panca",
              "tempo_recupero": 120,
              "peso": 20,
              "nserie": 5,
              "nripetizioni": 5,
              "descrizione": "usa la panca"
          },
          esercizio2:{
              "id" : 2,
              "nome" : "flessioni",
              "tempo_recupero": 60,
              "peso": 1,
              "nserie": 7,
              "nripetizioni": 2,
              "descrizione": "fai le flessioni"
          }
        }
  user:
    title: user
    type: object
    properties:
      id:
         type: integer
         readOnly: true
         description: the id of the user. Read only
      password:
        type: string
        description: the password of the user
      name:
        type: string
        description: the name of the user
      surname:
        type: string
        description: the surname of the user
      email:
        type: string
        description: the email of the user
      username:
        type: string
        description: the username of the user
      isPt:
        type: boolean
        description: indicates if the user is a personal trainer or not
    example:
        id: 46
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
  userRequestGet:
    title: user
    type: object
    properties:
      results:
         type: array
         items:
          $ref: '#/definitions/user'
      metadata:
        type: object
        properties:
         total:
          type: integer
          description: the numbers of users collected in the database
    example:
      results:
      - id: 46
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
      - id: 47
        password: calTech
        name: Roberto
        surname: Battiti
        email: es@example.com
        username: LionDeveloper
        isPt: true
      metadata:
        total: 2
  userRequestPost:
    title: user
    type: object
    required: 
      - name
      - password
      - surname
      - username
      - email
      - isPt
    properties:
      password:
        type: string
        description: the password of the user
        
      name:
        type: string
        description: the name of the user
        
      surname:
        type: string
        description: the surname of the user
        
      email:
        
        type: string
        description: the email of the user
        
      username:
        type: string
        description: the username of the user
        
      isPt:
        type: boolean
        description: indicates if the user is a personal trainer or not
        
    example:
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
        
  userRequestPut:
    title: user
    type: object
    properties:
      password:
        type: string
        description: the password of the user
        
      name:
        type: string
        description: the name of the user
        
      surname:
        type: string
        description: the surname of the user
        
      email:
        
        type: string
        description: the email of the user
        
      username:
        type: string
        description: the username of the user
        
      isPt:
        type: boolean
        description: indicates if the user is a personal trainer or not
        
    example:
        password: qwerty
        name: Bruno
        surname: Bianchi
        email: mail@example.com
        username: VonStaben
        isPt: true
        
  
  error500:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      error: server error
  error400:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      error: request bad formed

  error404:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      ERRORE: "not found"    
      

      

  storico:
    type: array
    items:
      type: object
      properties:
        timestamp: 
          type: integer
        esercizi:
          type: array
          items: 
            type: string
        ripetizioni:
          type: array
          items: 
            type: integer
      example:
        timestamp: 1575849599
        esercizi:
        - addominali
        - piegamenti
        - pesi
        ripetizioni:
        - 10
        - 20
        - 30

  postStorico:
    type: object
    properties:
      id:
        type: integer
      timestamp: 
        type: integer
      esercizi:
        type: array
        items:
          type: string
      ripetizioni:
        type: array
        items:
          type: integer
    example:
      id: 4
      timestamp: 1576022399
      esercizi:
      - addominali
      - piegamenti
      - squat
      ripetizioni:
      - 20
      - 50
      - 1
      
  data_to_del:
    type: object
    properties:
      id:
        type: integer
      data_to_del:
        type: integer
    example:
      id: 1
      data_to_del: 1575935999

  error200:
    title: success
    type: object
    properties:
      success:
        type: string
        description: Type of success
    example:
      success: Added 3 exericises    

  error422:
    title: error
    type: object
    properties:
      error: 
        type: string
        description: type of error
    example: 
      error: Error. id or dates are INVALID
      
  Info:
    title: Information
    type: object
    properties:
      id:
        type: string
        readOnly: true
      info1:
        type: string
        readOnly: false
      info2:
        type: string
        readOnly: false
      info3:
        type: string
        readOnly: false
      # How many you need
    required:
      - id
    example:
      id: "orario"
      apertura_feriale: "7.00"
      chiusura_feriale: "22.30"
      apertura_festiva: "10.00"
      chiusura_festiva: "20.00"    

      
